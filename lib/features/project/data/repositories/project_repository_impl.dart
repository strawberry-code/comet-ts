import 'package:dartz/dartz.dart';
import 'package:flutter_riverpod_clean_architecture/core/error/exceptions.dart';
import 'package:flutter_riverpod_clean_architecture/core/error/failures.dart';
import 'package:flutter_riverpod_clean_architecture/features/project/data/datasources/project_local_data_source.dart';
import 'package:flutter_riverpod_clean_architecture/features/project/data/models/project_model.dart';
import 'package:flutter_riverpod_clean_architecture/features/project/domain/entities/project_entity.dart';
import 'package:flutter_riverpod_clean_architecture/features/project/domain/repositories/project_repository.dart';

class ProjectRepositoryImpl implements ProjectRepository {
  final ProjectLocalDataSource localDataSource;

  ProjectRepositoryImpl({required this.localDataSource});

  @override
  Future<Either<Failure, ProjectEntity>> createProject(ProjectEntity project) async {
    try {
      final projectModel = ProjectModel(
        id: 0, // ID will be generated by the database
        name: project.name,
        budgetHours: project.budgetHours,
      );
      final createdProject = await localDataSource.createProject(projectModel);
      return Right(createdProject);
    } on CacheException {
      return Left(CacheFailure());
    }
  }

  @override
  Future<Either<Failure, ProjectEntity?>> getProject(int id) async {
    try {
      final project = await localDataSource.getProject(id);
      return Right(project);
    } on CacheException {
      return Left(CacheFailure());
    }
  }

  @override
  Future<Either<Failure, List<ProjectEntity>>> getAllProjects() async {
    try {
      final projects = await localDataSource.getAllProjects();
      return Right(projects);
    } on CacheException {
      return Left(CacheFailure());
    }
  }

  @override
  Future<Either<Failure, void>> updateProject(ProjectEntity project) async {
    try {
      final projectModel = ProjectModel(
        id: project.id,
        name: project.name,
        budgetHours: project.budgetHours,
      );
      await localDataSource.updateProject(projectModel);
      return const Right(null);
    } on CacheException {
      return Left(CacheFailure());
    }
  }

  @override
  Future<Either<Failure, void>> deleteProject(int id) async {
    try {
      await localDataSource.deleteProject(id);
      return const Right(null);
    } on CacheException {
      return Left(CacheFailure());
    }
  }
}
